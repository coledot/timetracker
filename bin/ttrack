#!/Users/alex/.rvm/rubies/ruby-1.9.2-p290/bin/ruby -w
require 'ttrack'

def usage(tt)
  puts 'Usage: ttrack [%s]' % (tt.commands * '|')
end

databasename = "%s/%s" % [ENV['HOME'], ".timetrackerdb"]
tt = TTrack.new databasename
case ARGV[0]
  when 'start' then
    stop = tt.start(ARGV[1], ARGV[2])
    if stop and not stop[1].nil?
      days = stop[1][:elapsed] / 86400
      puts 'Stop tracking issue "%s", run for %s%s' % [
        stop[1][:name],
        days > 0 ? "%d days " % days : '',
        Time.at(stop[1][:elapsed]).utc.strftime("%H hours %M minutes %S seconds")
      ]
      puts 'Start tracking issue "%s"' % ARGV[1]
    elsif stop
      puts 'Start tracking issue "%s"' % ARGV[1]
    else
      usage(tt)
    end

  when 'stop' then
    stop = tt.stop
    if stop
      days = stop[:elapsed] / 86400
      puts 'Stop issue "%s", run for %s%s' % [
        stop[:name],
        days > 0 ? "%d days " % days : '',
        Time.at(stop[:elapsed]).utc.strftime("%H hours %M minutes %S seconds")
      ]
    else
      puts('Not tracking')
    end

  when 'status' then
    status = tt.status(ARGV[1])
    unless status.nil?
      days = status[:elapsed] / 86400
      puts 'Stats for task "%s": %s%s' % [
        status[:task],
        days > 0 ? "%d days " % days : '',
        Time.at(status[:elapsed]).utc.strftime("%H hours %M minutes %S seconds")
      ]
    else
      puts "Currently not tracking"
    end

  when 'init' then
    puts 'Initlializing empty sqlite database: %s' % databasename
    tt.init

  when 'report' then
    report = tt.report(ARGV[1])
    lenghts = {:task => 4, :name => 4, :elapsed => 7}
    report.each do |line|
      lenghts.keys.each do |i|
        if i == :elapsed
          lenghts[i] = line[i].to_i.to_s.length if line[i].to_i.to_s.length >= lenghts[i]
        else
          lenghts[i] = line[i].to_s.length if line[i].to_s.length >= lenghts[i]
        end
      end
    end

    # Fix Name column width if report name is given
    lenghts[:name] = ARGV[1].nil? ? lenghts[:name] : ARGV[1].length

    puts "%#{lenghts[:task]}s | %-#{lenghts[:name]}s | %s | %s | %-#{lenghts[:elapsed]}s | %s" %
      ["Task", "Name", "Start              ", "Stop               ", "Elapsed", "Notes"]
    report.each do |line|
      puts "%#{lenghts[:task]}s | %-#{lenghts[:name]}s | %s | %s | %-#{lenghts[:elapsed]}d | %s" %
        [
          line[:task],
          line[:name].nil? ? ARGV[1] : line[:name],
          line[:tstart],
          line[:tstop].nil? ? '    < running >    ' : line[:tstop],
          line[:elapsed],
          line[:notes]
        ]
    end

  when 'begin' then
    begin
      timestamp = ARGV[3] ? "%s %s" % ARGV[2..3] : ARGV[2]
      tt.set_tstart! ARGV[1], timestamp
    rescue Exception => e
      usage(tt)
    end

  when 'end' then
    begin
      timestamp = ARGV[3] ? "%s %s" % ARGV[2..3] : ARGV[2]
      tt.set_tstop! ARGV[1], timestamp
    rescue
      usage(tt)
    end

  else
    usage(tt)
end
